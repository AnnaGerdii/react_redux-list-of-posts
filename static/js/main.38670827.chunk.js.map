{"version":3,"sources":["api/posts.js","api/users.js","api/comments.js","store/query.js","store/actions.js","store/posts.js","store/loading.js","store/error.js","store/init.js","store/store.js","User.js","Comment.js","CommentList.js","highlight.js","Post.js","PostList.js","App.js","index.js"],"names":["getPostsFromServer","posts","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsersFromServer","users","getCommentsFromServer","comments","queryReducer","state","arguments","length","undefined","action","type","query","postsReducer","filter","post","id","loadingReducer","errorReducer","initializingReducer","getIsLoading","isLoading","getHasError","hasError","getIsInitialized","isInitialized","getPosts","getQuery","reducer","combineReducers","store","createStore","applyMiddleware","thunk","User","_ref","_ref$userObj","userObj","name","email","address","react_default","createElement","concat","street","suite","city","Comment","_ref$comment","comment","body","className","CommentList","map","currentComment","src_Comment","key","getHighlightedText","text","highlight","split","RegExp","part","i","toLowerCase","connect","highlightedPart","handleDelete","user","title","commentList","src_User","onClick","src_CommentList","visiblePosts","_ref2","includes","currentPost","src_Post","mapDispatchToProps","load","dispatch","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","Promise","all","Object","slicedToArray","find","person","userId","postId","objectSpread2","t0","setQueryValue","_useState","useState","_useState2","visibleQuery","setVisibleQuery","planQueryUpdate","useCallback","debounce","Fragment","placeholder","onChange","e","input","target","value","replace","src_PostList","disabled","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.38670827.chunk.js","sourcesContent":["const URL_POSTS = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const getPostsFromServer = async() => {\n  const posts = await fetch(URL_POSTS);\n\n  return posts.json();\n};\n","const URL_USERS = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getUsersFromServer = async() => {\n  const users = await fetch(URL_USERS);\n\n  return users.json();\n};\n","const URL_COMMENTS = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getCommentsFromServer = async() => {\n  const comments = await fetch(URL_COMMENTS);\n\n  return comments.json();\n};\n","import { UPDATE_QUERY } from './actions';\n\nconst queryReducer = (state = '', action) => {\n  switch (action.type) {\n    case UPDATE_QUERY:\n      return action.query;\n\n    default:\n      return state;\n  }\n};\n\nexport default queryReducer;\n","import { getPostsFromServer } from '../api/posts';\nimport { getUsersFromServer } from '../api/users';\nimport { getCommentsFromServer } from '../api/comments';\n\nexport const UPDATE_QUERY = 'UPDATE_QUERY';\nexport const START_LOADING = 'START_LOADING';\nexport const HANDLE_ERROR = 'HANDLE_ERROR';\nexport const HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nexport const HANDLE_REMOVE = 'HANDLE_REMOVE';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const handleError = () => ({ type: HANDLE_ERROR });\nexport const updateQuery = query => ({\n  type: UPDATE_QUERY,\n  query,\n});\nexport const handleSuccess = posts => ({\n  type: HANDLE_SUCCESS,\n  posts,\n});\n\nexport const handleRemove = id => ({\n  type: HANDLE_REMOVE,\n  id,\n});\n\nexport const loadList = () => async(dispatch) => {\n  dispatch(startLoading());\n\n  try {\n    const [\n      postsFromServer,\n      usersFromServer,\n      commentsFromServer] = await Promise.all([\n      getPostsFromServer(),\n      getUsersFromServer(),\n      getCommentsFromServer(),\n    ]);\n\n    const preparedPosts = postsFromServer.map((post) => {\n      const user = usersFromServer.find(person => person.id === post.userId);\n      const commentList = commentsFromServer\n        .filter(comment => comment.postId === post.id);\n\n      return {\n        ...post, user, commentList,\n      };\n    });\n\n    dispatch(handleSuccess(preparedPosts));\n  } catch {\n    dispatch(handleError());\n  }\n};\n","import { HANDLE_SUCCESS, HANDLE_REMOVE } from './actions';\n\nconst postsReducer = (state = [], action) => {\n  switch (action.type) {\n    case HANDLE_SUCCESS:\n      return action.posts;\n\n    case HANDLE_REMOVE:\n      return state.filter(post => post.id !== action.id);\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { START_LOADING, HANDLE_SUCCESS, HANDLE_ERROR } from './actions';\n\nconst loadingReducer = (state = false, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n    case HANDLE_ERROR:\n    case HANDLE_SUCCESS:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { HANDLE_ERROR } from './actions';\n\nconst errorReducer = (state = false, action) => {\n  switch (action.type) {\n    case HANDLE_ERROR:\n      return true;\n\n    default:\n      return state;\n  }\n};\n\nexport default errorReducer;\n","import { HANDLE_SUCCESS } from './actions';\n\nconst initializingReducer = (state = false, action) => {\n  switch (action.type) {\n    case HANDLE_SUCCESS:\n      return true;\n\n    default:\n      return state;\n  }\n};\n\nexport default initializingReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport queryReducer from './query';\nimport postsReducer from './posts';\nimport loadingReducer from './loading';\nimport errorReducer from './error';\nimport initializingReducer from './init';\n\nexport const getIsLoading = state => state.isLoading;\nexport const getHasError = state => state.hasError;\nexport const getIsInitialized = state => state.isInitialized;\nexport const getPosts = state => state.posts;\nexport const getQuery = state => state.query;\n\nconst initialState = {\n  posts: [],\n  isLoading: false,\n  hasError: false,\n  isInitialized: false,\n  query: '',\n};\n\nconst reducer = combineReducers({\n  query: queryReducer,\n  isLoading: loadingReducer,\n  hasError: errorReducer,\n  isInitialized: initializingReducer,\n  posts: postsReducer,\n});\n\nconst store = createStore(reducer, initialState, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ userObj: { name, email, address } }) => (\n  <p>\n    {`By ${name}`}\n    <br />\n    {email}\n    <br />\n    {`${address.street}, ${address.suite}, ${address.city}`}\n  </p>\n);\n\nUser.propTypes = {\n  userObj: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    address: PropTypes.shape({\n      street: PropTypes.string.isRequired,\n      suite: PropTypes.string.isRequired,\n      city: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Comment = ({ comment: { name, body, email, id } }) => (\n  <div className=\"comment\">\n    <dt>\n      {`Comment ${id}: ${body}`}\n    </dt>\n    <dd className=\"description\">\n      {`Name: ${name}`}\n      <br />\n      {`Email: ${email}`}\n    </dd>\n  </div>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default Comment;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Comment from './Comment';\n\nconst CommentList = ({ comments }) => (\n  <dl>\n    {comments.map(currentComment => (\n      <Comment\n        comment={currentComment}\n        key={currentComment.id}\n      />\n    ))}\n  </dl>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes\n    .arrayOf(PropTypes.shape({ id: PropTypes.number.isRequired })).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\n\nexport const getHighlightedText = (text, highlight) => {\n  const parts = (text || '').split(new RegExp(`(${highlight})`, 'gi'));\n\n  return parts.map((part, i) => (\n    <span key={`${part + i}`}>\n      {part.toLowerCase() === highlight.toLowerCase()\n        ? <span className=\"highlighted\">{part}</span> : part}\n    </span>\n  ));\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getQuery } from './store/store';\nimport { handleRemove } from './store/actions';\nimport User from './User';\nimport CommentList from './CommentList';\nimport { getHighlightedText } from './highlight';\n\nconst Post\n  = ({ post, highlightedPart, handleDelete }) => {\n    const { id, user, title, body, commentList } = post;\n\n    return (\n      <div className=\"post\">\n        <dt className=\"title\">\n          {`Post ${id}: `}\n          {getHighlightedText(title, highlightedPart)}\n        </dt>\n        <dd className=\"description\">\n          <span className=\"post-body\">\n            {getHighlightedText(body, highlightedPart)}\n          </span>\n          <span className=\"user-info\">\n            <User userObj={user} />\n          </span>\n          <button\n            type=\"button\"\n            className=\"button button_remove\"\n            onClick={() => handleDelete(id)}\n          >\n          Remove this post\n          </button>\n          <CommentList\n            comments={commentList}\n          />\n        </dd>\n      </div>\n    );\n  };\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    user: PropTypes.shape({}).isRequired,\n    commentList: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  }).isRequired,\n  highlightedPart: PropTypes.string.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  highlightedPart: getQuery(state),\n});\n\nexport default connect(mapStateToProps, { handleDelete: handleRemove })(Post);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getPosts, getQuery } from './store/store';\nimport Post from './Post';\n\nconst PostList = ({ posts, query }) => {\n  const visiblePosts = posts\n    .filter(({ title, body }) => (\n      (title + body).toLowerCase().includes(query)));\n\n  return (\n    <dl>\n      {visiblePosts.map(currentPost => (\n        <Post\n          post={currentPost}\n          key={currentPost.id}\n        />\n      ))}\n    </dl>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  query: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  query: getQuery(state),\n});\n\nexport default connect(mapStateToProps, null)(PostList);\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport { getIsLoading, getIsInitialized, getHasError } from './store/store';\nimport { updateQuery, loadList } from './store/actions';\nimport PostList from './PostList';\nimport './App.scss';\n\nconst App\n  = ({ isLoading, hasError, setQueryValue, isInitialized, load }) => {\n    const [visibleQuery, setVisibleQuery] = useState('');\n\n    const planQueryUpdate = useCallback(\n      debounce(setQueryValue, 500),\n      []\n    );\n    const handleQueryUpdate = (e) => {\n      const input = e.target.value.replace(/^\\s+/, '');\n\n      planQueryUpdate(input.toLowerCase());\n      setVisibleQuery(input);\n    };\n\n    if (hasError) {\n      return <p className=\"error-message\">Oops, something went wrong!</p>;\n    }\n\n    return (\n      <div className=\"App\">\n        {!isInitialized ? (\n          <>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={load}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Loading...' : 'Load'}\n            </button>\n          </>\n        ) : (\n          <>\n            <div className=\"top\">\n              <h1 className=\"table__heading\">React-Redux list of posts</h1>\n              <input\n                type=\"text\"\n                className=\"search-bar\"\n                placeholder=\"Search...\"\n                onChange={handleQueryUpdate}\n                value={visibleQuery}\n              />\n            </div>\n            <PostList />\n          </>\n        )}\n      </div>\n    );\n  };\n\nApp.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  isInitialized: PropTypes.bool.isRequired,\n  setQueryValue: PropTypes.func.isRequired,\n  load: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getIsLoading(state),\n  hasError: getHasError(state),\n  isInitialized: getIsInitialized(state),\n});\n\nconst mapDispatchToProps = {\n  load: loadList,\n  setQueryValue: updateQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}